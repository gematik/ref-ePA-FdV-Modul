package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* An ST that optionally may have a code attached.
*                 The text must always be present if a code is present. The
*                 code is often a local code.
*/
public class SC extends ST implements KvmSerializable,java.io.Serializable
{
    
	/**
	* The plain code symbol defined by the code system.
	*                             For example, "784.0" is the code symbol of the ICD-9
	*                             code "784.0" for headache.
	*/
    public String code;
    
	/**
	* Specifies the code system that defines the code.
	*/
    public String codeSystem;
    
	/**
	* A common name of the coding system.
	*/
    public String codeSystemName;
    
	/**
	* If applicable, a version descriptor defined
	*                             specifically for the given code system.
	*/
    public String codeSystemVersion;
    
	/**
	* A name or title for the code, under which the sending
	*                             system shows the code value to its users.
	*/
    public String displayName;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("code"))
        {	
            java.lang.Object j = inObj.getAttribute("code");
            if (j != null)
            {
                code = j.toString();
            }
        }if (inObj.hasAttribute("codeSystem"))
        {	
            java.lang.Object j = inObj.getAttribute("codeSystem");
            if (j != null)
            {
                codeSystem = j.toString();
            }
        }if (inObj.hasAttribute("codeSystemName"))
        {	
            java.lang.Object j = inObj.getAttribute("codeSystemName");
            if (j != null)
            {
                codeSystemName = j.toString();
            }
        }if (inObj.hasAttribute("codeSystemVersion"))
        {	
            java.lang.Object j = inObj.getAttribute("codeSystemVersion");
            if (j != null)
            {
                codeSystemVersion = j.toString();
            }
        }if (inObj.hasAttribute("displayName"))
        {	
            java.lang.Object j = inObj.getAttribute("displayName");
            if (j != null)
            {
                displayName = j.toString();
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+0;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return 5;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        if(index==0)
                {
                info.name = "code";
                info.namespace= "";
                if(this.code!=null)
                {
                    info.setValue(this.code);
                }
            
                }if(index==1)
                {
                info.name = "codeSystem";
                info.namespace= "";
                if(this.codeSystem!=null)
                {
                    info.setValue(this.codeSystem);
                }
            
                }if(index==2)
                {
                info.name = "codeSystemName";
                info.namespace= "";
                if(this.codeSystemName!=null)
                {
                    info.setValue(this.codeSystemName);
                }
            
                }if(index==3)
                {
                info.name = "codeSystemVersion";
                info.namespace= "";
                if(this.codeSystemVersion!=null)
                {
                    info.setValue(this.codeSystemVersion);
                }
            
                }if(index==4)
                {
                info.name = "displayName";
                info.namespace= "";
                if(this.displayName!=null)
                {
                    info.setValue(this.displayName);
                }
            
                }    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
