package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.math.BigInteger;

public class UC_GeschuetzteVersichertendatenXML_Selektivvertraege extends AttributeContainer implements KvmSerializable,java.io.Serializable
{
    
	/**
	* Gibt an, ob fuer den Versicherten ein aerztlicher Selektivvertrag vorliegt.
	* Dieses Datenfeld ist besonders schuetzenswert und daher nicht frei auslesbar, sondern nur berechtigten Personen zugaenglich.
	* Schluesselverzeichnis:
	* 1 = aerztlicher Selektivvertrag liegt vor
	* 0 = aerztlicher Selektivvertrag liegt nicht vor 
	* 9 = aerztliches Selektivvertragskennzeichen wird nicht genutzt
	*/
    public BigInteger Aerztlich=BigInteger.ZERO;
    
	/**
	* Gibt an, ob fuer den Versicherten ein zahnaerztlicher Selektivvertrag vorliegt.
	* Dieses Datenfeld ist besonders schuetzenswert und daher nicht frei auslesbar, sondern nur berechtigten Personen zugaenglich.
	* Schluesselverzeichnis:
	* 1 = zahnaerztlicher Selektivvertrag liegt vor
	* 0 = zahnaerztlicher Selektivvertrag liegt nicht vor 
	* 9 = zahnaerztliches Selektivvertragskennzeichen wird nicht genutzt
	*/
    public BigInteger Zahnaerztlich=BigInteger.ZERO;
    
	/**
	* Gibt die Paragraphen des  SGB V an, in denen Selektivvertraege beschrieben sind.
	* Die Angaben gelten fuer folgende Selektivvertraege:
	* 1. Stelle: Hausarztzentrierte Versorgung (§73b)
	* 2. Stelle: nicht besetzt
	* 3. Stelle: Strukturierte Behandlungsprogramme (§137f)
	* 4. Stelle: Integrierte Versorgung (§140a)
	* Die Stellen 1 und 3 koennen den Wert = 1 (true) nur annehmen, wenn Aerztlich = 1 (true) ist.
	* 
	* Die Stelle 4 kann sowohl zur Kennzeichnung aerztlicher als auch zahnaerztlicher Selektivvertraege genutzt werden.
	* Beispiel: 1000
	* Es liegt ein Selektivvertrag fuer die Hausarztzentrierte Versorgung nach §73b vor.
	* In der Testphase koennen die Krankenkassen im geschuetzten Bereich die Paragraphen des SGB V, in denen Selektivvertraege beschrieben sind (§§73b, 137f, 140a), im Rahmen der offenen Speicherkapazitaet abbilden.
	*/
    public String Art;
        
    private transient java.lang.Object __source;    
    

    
    
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        __source=inObj; 
        
        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                if(!loadProperty(info,soapObject,__envelope))
                {
                }
            } 
        }



    }

    
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("Aerztlich"))
        {
            if(obj!=null)
            {
                if (obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    if(j.toString()!=null)
                    {
                        this.Aerztlich = new BigInteger(j.toString());
                    }
                }
                else if (obj instanceof BigInteger){
                    this.Aerztlich = (BigInteger)obj;
                }
            }
            return true;
        }
        if (info.name.equals("Zahnaerztlich"))
        {
            if(obj!=null)
            {
                if (obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    if(j.toString()!=null)
                    {
                        this.Zahnaerztlich = new BigInteger(j.toString());
                    }
                }
                else if (obj instanceof BigInteger){
                    this.Zahnaerztlich = (BigInteger)obj;
                }
            }
            return true;
        }
        if (info.name.equals("Art"))
        {
            if(obj!=null)
            {
                if (obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    if(j.toString()!=null)
                    {
                        this.Art = j.toString();
                    }
                }
                else if (obj instanceof String){
                    this.Art = (String)obj;
                }
            }
            return true;
        }
        return false;
    }
    
    public java.lang.Object getOriginalXmlSource()
    {
        return __source;
    }    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return this.Aerztlich!=null?this.Aerztlich.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==1)
        {
            return this.Zahnaerztlich!=null?this.Zahnaerztlich.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==2)
        {
            return this.Art!=null?this.Art:SoapPrimitive.NullSkip;
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 3;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Aerztlich";
            info.namespace= "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Zahnaerztlich";
            info.namespace= "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
        }
        if(propertyIndex==2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Art";
            info.namespace= "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
        }
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}
