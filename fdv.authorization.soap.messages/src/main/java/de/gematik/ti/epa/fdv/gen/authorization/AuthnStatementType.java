package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class AuthnStatementType extends StatementAbstractType implements KvmSerializable,java.io.Serializable
{
    
    public SubjectLocalityType SubjectLocality;
    
    public AuthnContextType AuthnContext;
    
    public java.util.Date AuthnInstant;
    
    public String SessionIndex;
    
    public java.util.Date SessionNotOnOrAfter;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("AuthnInstant"))
        {	
            java.lang.Object j = inObj.getAttribute("AuthnInstant");
            if (j != null)
            {
                AuthnInstant = Helper.ConvertFromWebService(j.toString());
            }
        }if (inObj.hasAttribute("SessionIndex"))
        {	
            java.lang.Object j = inObj.getAttribute("SessionIndex");
            if (j != null)
            {
                SessionIndex = j.toString();
            }
        }if (inObj.hasAttribute("SessionNotOnOrAfter"))
        {	
            java.lang.Object j = inObj.getAttribute("SessionNotOnOrAfter");
            if (j != null)
            {
                SessionNotOnOrAfter = Helper.ConvertFromWebService(j.toString());
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("SubjectLocality"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.SubjectLocality = (SubjectLocalityType)__envelope.get(j,SubjectLocalityType.class,false);
            }
            return true;
        }
        if (info.name.equals("AuthnContext"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.AuthnContext = (AuthnContextType)__envelope.get(j,AuthnContextType.class,false);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.SubjectLocality!=null?this.SubjectLocality:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return AuthnContext;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+2;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SubjectLocalityType.class;
            info.name = "SubjectLocality";
            info.namespace= "urn:oasis:names:tc:SAML:2.0:assertion";
        }
        if(propertyIndex==count+1)
        {
            info.type = AuthnContextType.class;
            info.name = "AuthnContext";
            info.namespace= "urn:oasis:names:tc:SAML:2.0:assertion";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return 3;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        if(index==0)
                {
                info.name = "AuthnInstant";
                info.namespace= "";
                if(this.AuthnInstant!=null)
                {
                    info.setValue(this.AuthnInstant);
                }
            
                }if(index==1)
                {
                info.name = "SessionIndex";
                info.namespace= "";
                if(this.SessionIndex!=null)
                {
                    info.setValue(this.SessionIndex);
                }
            
                }if(index==2)
                {
                info.name = "SessionNotOnOrAfter";
                info.namespace= "";
                if(this.SessionNotOnOrAfter!=null)
                {
                    info.setValue(this.SessionNotOnOrAfter);
                }
            
                }    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
