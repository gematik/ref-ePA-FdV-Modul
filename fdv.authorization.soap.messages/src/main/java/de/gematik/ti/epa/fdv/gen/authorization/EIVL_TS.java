package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* Note: because this type is defined as an extension of SXCM_T,
*             all of the attributes and elements accepted for T are also
*             accepted by this definition.  However, they are NOT allowed
*             by the normative description of this type.  Unfortunately,
*             we cannot write a general purpose schematron contraints to
*             provide that extra validation, thus applications must be
*             aware that instance (fragments) that pass validation with
*             this might might still not be legal.
*/
public class EIVL_TS extends SXCM_TS implements KvmSerializable,java.io.Serializable
{
    
	/**
	* A code for a common (periodical) activity of daily
	*                         living based on which the event related periodic
	*                         interval is specified.
	*/
    public EIVL_x002E_event _event;
    
	/**
	* An interval of elapsed time (duration, not absolute
	*                         point in time) that marks the offsets for the
	*                         beginning, width and end of the event-related periodic
	*                         interval measured from the time each such event
	*                         actually occurred.
	*/
    public IVL_PQ offset;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);



    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("event"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this._event = (EIVL_x002E_event)__envelope.get(j,EIVL_x002E_event.class,false);
            }
            return true;
        }
        if (info.name.equals("offset"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.offset = (IVL_PQ)__envelope.get(j,IVL_PQ.class,false);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this._event!=null?this._event:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.offset!=null?this.offset:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+2;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = EIVL_x002E_event.class;
            info.name = "event";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+1)
        {
            info.type = IVL_PQ.class;
            info.name = "offset";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}
