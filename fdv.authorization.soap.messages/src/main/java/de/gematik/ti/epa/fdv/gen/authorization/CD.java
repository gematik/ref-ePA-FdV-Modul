package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

/**
* A concept descriptor represents any kind of concept usually
*                 by giving a code defined in a code system.  A concept
*                 descriptor can contain the original text or phrase that
*                 served as the basis of the coding and one or more
*                 translations into different coding systems. A concept
*                 descriptor can also contain qualifiers to describe, e.g.,
*                 the concept of a "left foot" as a postcoordinated term built
*                 from the primary code "FOOT" and the qualifier "LEFT".
*                 In exceptional cases, the concept descriptor need not
*                 contain a code but only the original text describing
*                 that concept.
*/
public class CD extends ANY implements KvmSerializable,java.io.Serializable
{
    
	/**
	* The text or phrase used as the basis for the coding.
	*/
    public ED originalText;
    
	/**
	* Specifies additional codes that increase the
	*                                 specificity of the primary code.
	*/
    public ArrayList< CR> qualifier =new ArrayList<CR >();
    
	/**
	* A set of other concept descriptors that translate
	*                                 this concept descriptor into other code systems.
	*/
    public ArrayList< CD> translation =new ArrayList<CD >();
    
	/**
	* The plain code symbol defined by the code system.
	*                             For example, "784.0" is the code symbol of the ICD-9
	*                             code "784.0" for headache.
	*/
    public String code;
    
	/**
	* Specifies the code system that defines the code.
	*/
    public String codeSystem;
    
	/**
	* A common name of the coding system.
	*/
    public String codeSystemName;
    
	/**
	* If applicable, a version descriptor defined
	*                             specifically for the given code system.
	*/
    public String codeSystemVersion;
    
	/**
	* A name or title for the code, under which the sending
	*                             system shows the code value to its users.
	*/
    public String displayName;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("code"))
        {	
            java.lang.Object j = inObj.getAttribute("code");
            if (j != null)
            {
                code = j.toString();
            }
        }if (inObj.hasAttribute("codeSystem"))
        {	
            java.lang.Object j = inObj.getAttribute("codeSystem");
            if (j != null)
            {
                codeSystem = j.toString();
            }
        }if (inObj.hasAttribute("codeSystemName"))
        {	
            java.lang.Object j = inObj.getAttribute("codeSystemName");
            if (j != null)
            {
                codeSystemName = j.toString();
            }
        }if (inObj.hasAttribute("codeSystemVersion"))
        {	
            java.lang.Object j = inObj.getAttribute("codeSystemVersion");
            if (j != null)
            {
                codeSystemVersion = j.toString();
            }
        }if (inObj.hasAttribute("displayName"))
        {	
            java.lang.Object j = inObj.getAttribute("displayName");
            if (j != null)
            {
                displayName = j.toString();
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("originalText"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.originalText = (ED)__envelope.get(j,ED.class,false);
            }
            return true;
        }
        if (info.name.equals("qualifier"))
        {
            if(obj!=null)
            {
if(this.qualifier==null)
                {
                    this.qualifier = new java.util.ArrayList< CR>();
                }
                java.lang.Object j =obj;
                CR j1= (CR)__envelope.get(j,CR.class,false);
                this.qualifier.add(j1);            }
            return true;
        }
        if (info.name.equals("translation"))
        {
            if(obj!=null)
            {
if(this.translation==null)
                {
                    this.translation = new java.util.ArrayList< CD>();
                }
                java.lang.Object j =obj;
                CD j1= (CD)__envelope.get(j,CD.class,false);
                this.translation.add(j1);            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.originalText!=null?this.originalText:SoapPrimitive.NullSkip;
        }
        if(propertyIndex>=count+1 && propertyIndex < count+1+this.qualifier.size())
        {
                java.lang.Object qualifier = this.qualifier.get(propertyIndex-(count+1));
                return qualifier!=null?qualifier:SoapPrimitive.NullNilElement;
        }
        if(propertyIndex>=count+1+this.qualifier.size() && propertyIndex < count+1+this.qualifier.size()+this.translation.size())
        {
                java.lang.Object translation = this.translation.get(propertyIndex-(count+1+this.qualifier.size()));
                return translation!=null?translation:SoapPrimitive.NullNilElement;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+1+qualifier.size()+translation.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = ED.class;
            info.name = "originalText";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex>=count+1 && propertyIndex < count+1+this.qualifier.size())
        {
            info.type = CR.class;
            info.name = "qualifier";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex>=count+1+this.qualifier.size() && propertyIndex < count+1+this.qualifier.size()+this.translation.size())
        {
            info.type = CD.class;
            info.name = "translation";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 5;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
                {
                info.name = "code";
                info.namespace= "";
                if(this.code!=null)
                {
                    info.setValue(this.code);
                }
            
                }if(index==count+1)
                {
                info.name = "codeSystem";
                info.namespace= "";
                if(this.codeSystem!=null)
                {
                    info.setValue(this.codeSystem);
                }
            
                }if(index==count+2)
                {
                info.name = "codeSystemName";
                info.namespace= "";
                if(this.codeSystemName!=null)
                {
                    info.setValue(this.codeSystemName);
                }
            
                }if(index==count+3)
                {
                info.name = "codeSystemVersion";
                info.namespace= "";
                if(this.codeSystemVersion!=null)
                {
                    info.setValue(this.codeSystemVersion);
                }
            
                }if(index==count+4)
                {
                info.name = "displayName";
                info.namespace= "";
                if(this.displayName!=null)
                {
                    info.setValue(this.displayName);
                }
            
                }    if(index < count)
    {
        super.getAttributeInfo(index, info);
    }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
