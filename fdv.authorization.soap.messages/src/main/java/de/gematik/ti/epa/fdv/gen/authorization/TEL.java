package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

/**
* A telephone number (voice or fax), e-mail address, or
*                 other locator for a resource (information or service)
*                 mediated by telecommunication equipment. The address
*                 is specified as a URL
*                 qualified by time specification and use codes that help
*                 in deciding which address to use for a given time and
*                 purpose.
*/
public class TEL extends URL implements KvmSerializable,java.io.Serializable
{
    
	/**
	* Specifies the periods of time during which the
	*                                 telecommunication address can be used.  For a
	*                                 telephone number, this can indicate the time of day
	*                                 in which the party can be reached on that telephone.
	*                                 For a web address, it may specify a time range in
	*                                 which the web content is promised to be available
	*                                 under the given address.
	*/
    public ArrayList< SXCM_TS> useablePeriod =new ArrayList<SXCM_TS >();
    
	/**
	* One or more codes advising a system or user which
	*                             telecommunication address in a set of like addresses
	*                             to select for a given telecommunication need.
	*/
    public String use;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("use"))
        {	
            java.lang.Object j = inObj.getAttribute("use");
            if (j != null)
            {
                use = j.toString();
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("useablePeriod"))
        {
            if(obj!=null)
            {
if(this.useablePeriod==null)
                {
                    this.useablePeriod = new java.util.ArrayList< SXCM_TS>();
                }
                java.lang.Object j =obj;
                SXCM_TS j1= (SXCM_TS)__envelope.get(j,SXCM_TS.class,false);
                this.useablePeriod.add(j1);            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex>=count+0 && propertyIndex < count+0+this.useablePeriod.size())
        {
                java.lang.Object useablePeriod = this.useablePeriod.get(propertyIndex-(count+0));
                return useablePeriod!=null?useablePeriod:SoapPrimitive.NullNilElement;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+0+useablePeriod.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex>=count+0 && propertyIndex < count+0+this.useablePeriod.size())
        {
            info.type = SXCM_TS.class;
            info.name = "useablePeriod";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 1;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
                {
                info.name = "use";
                info.namespace= "";
                if(this.use!=null)
                {
                    info.setValue(this.use);
                }
            
                }    if(index < count)
    {
        super.getAttributeInfo(index, info);
    }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
