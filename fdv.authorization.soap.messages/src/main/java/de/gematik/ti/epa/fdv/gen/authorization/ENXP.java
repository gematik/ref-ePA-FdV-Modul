package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* A character string token representing a part of a name.
*                 May have a type code signifying the role of the part in
*                 the whole entity name, and a qualifier code for more detail
*                 about the name part type. Typical name parts for person
*                 names are given names, and family names, titles, etc.
*/
public class ENXP extends ST implements KvmSerializable,java.io.Serializable
{
    
	/**
	* Indicates whether the name part is a given name, family
	*                             name, prefix, suffix, etc.
	*/
    public String partType;
    
	/**
	* is a set of codes each of which specifies
	*                             a certain subcategory of the name part in addition to
	*                             the main name part type. For example, a given name may
	*                             be flagged as a nickname, a family name may be a
	*                             pseudonym or a name of public records.
	*/
    public String qualifier;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("partType"))
        {	
            java.lang.Object j = inObj.getAttribute("partType");
            if (j != null)
            {
                partType = j.toString();
            }
        }if (inObj.hasAttribute("qualifier"))
        {	
            java.lang.Object j = inObj.getAttribute("qualifier");
            if (j != null)
            {
                qualifier = j.toString();
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+0;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return 2;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        if(index==0)
                {
                info.name = "partType";
                info.namespace= "";
                if(this.partType!=null)
                {
                    info.setValue(this.partType);
                }
            
                }if(index==1)
                {
                info.name = "qualifier";
                info.namespace= "";
                if(this.qualifier!=null)
                {
                    info.setValue(this.qualifier);
                }
            
                }    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
