package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* Data that is primarily intended for human interpretation
*                 or for further machine processing is outside the scope of
*                 HL7. This includes unformatted or formatted written language,
*                 multimedia data, or structured information as defined by a
*                 different standard (e.g., XML-signatures.)  Instead of the
*                 data itself, an ED may contain
*                 only a reference (see TEL.) Note
*                 that the ST data type is a
*                 specialization of
*                 when the  is text/plain.
*/
public class ED extends BIN implements KvmSerializable,java.io.Serializable
{
    
	/**
	* A telecommunication address (TEL), such as a URL
	*                                 for HTTP or FTP, which will resolve to precisely
	*                                 the same binary data that could as well have been
	*                                 provided as inline data.
	*/
    public TEL reference;
    
    public thumbnail thumbnail;
    
	/**
	* Identifies the type of the encapsulated data and
	*                             identifies a method to interpret or render the data.
	*/
    public String mediaType;
    
	/**
	* For character based information the language property
	*                             specifies the human language of the text.
	*/
    public String language;
    
	/**
	* Indicates whether the raw byte data is compressed,
	*                             and what compression algorithm was used.
	*/
    public Enums.CompressionAlgorithm compression;
    
	/**
	* The integrity check is a short binary value representing
	*                             a cryptographically strong checksum that is calculated
	*                             over the binary data. The purpose of this property, when
	*                             communicated with a reference is for anyone to validate
	*                             later whether the reference still resolved to the same
	*                             data that the reference resolved to when the encapsulated
	*                             data value with reference was created.
	*/
    public byte[] integrityCheck;
    
	/**
	* Specifies the algorithm used to compute the
	*                             integrityCheck value.
	*/
    public Enums.IntegrityCheckAlgorithm integrityCheckAlgorithm;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("mediaType"))
        {	
            java.lang.Object j = inObj.getAttribute("mediaType");
            if (j != null)
            {
                mediaType = j.toString();
            }
        }if (inObj.hasAttribute("language"))
        {	
            java.lang.Object j = inObj.getAttribute("language");
            if (j != null)
            {
                language = j.toString();
            }
        }if (inObj.hasAttribute("compression"))
        {	
            java.lang.Object j = inObj.getAttribute("compression");
            if (j != null)
            {
                compression = Enums.CompressionAlgorithm.fromString(j.toString());
            }
        }if (inObj.hasAttribute("integrityCheck"))
        {	
            java.lang.Object j = inObj.getAttribute("integrityCheck");
            if (j != null)
            {
                integrityCheck = org.kobjects.base64.Base64.decode(j.toString());
            }
        }if (inObj.hasAttribute("integrityCheckAlgorithm"))
        {	
            java.lang.Object j = inObj.getAttribute("integrityCheckAlgorithm");
            if (j != null)
            {
                integrityCheckAlgorithm = Enums.IntegrityCheckAlgorithm.fromString(j.toString());
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("reference"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.reference = (TEL)__envelope.get(j,TEL.class,false);
            }
            return true;
        }
        if (info.name.equals("thumbnail"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.thumbnail = (thumbnail)__envelope.get(j,thumbnail.class,false);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.reference!=null?this.reference:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.thumbnail!=null?this.thumbnail:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+2;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = TEL.class;
            info.name = "reference";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+1)
        {
            info.type = thumbnail.class;
            info.name = "thumbnail";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 5;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
                {
                info.name = "mediaType";
                info.namespace= "";
                if(this.mediaType!=null)
                {
                    info.setValue(this.mediaType);
                }
            
                }if(index==count+1)
                {
                info.name = "language";
                info.namespace= "";
                if(this.language!=null)
                {
                    info.setValue(this.language);
                }
            
                }if(index==count+2)
                {
                info.name = "compression";
                info.namespace= "";
                if(this.compression!=null)
                {
                    info.setValue(this.compression);
                }
            
                }if(index==count+3)
                {
                info.name = "integrityCheck";
                info.namespace= "";
                if(this.integrityCheck!=null)
                {
                    info.setValue(org.kobjects.base64.Base64.encode(this.integrityCheck));
                }
            
                }if(index==count+4)
                {
                info.name = "integrityCheckAlgorithm";
                info.namespace= "";
                if(this.integrityCheckAlgorithm!=null)
                {
                    info.setValue(this.integrityCheckAlgorithm);
                }
            
                }    if(index < count)
    {
        super.getAttributeInfo(index, info);
    }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
