package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* A concept qualifier code with optionally named role.
*                 Both qualifier role and value codes must be defined by
*                 the coding system.  For example, if SNOMED RT defines a
*                 concept "leg", a role relation "has-laterality", and
*                 another concept "left", the concept role relation allows
*                 to add the qualifier "has-laterality: left" to a primary
*                 code "leg" to construct the meaning "left leg".
*/
public class CR extends ANY implements KvmSerializable,java.io.Serializable
{
    
	/**
	* Specifies the manner in which the concept role value
	*                                 contributes to the meaning of a code phrase.  For
	*                                 example, if SNOMED RT defines a concept "leg", a role
	*                                 relation "has-laterality", and another concept "left",
	*                                 the concept role relation allows to add the qualifier
	*                                 "has-laterality: left" to a primary code "leg" to
	*                                 construct the meaning "left leg".  In this example
	*                                 "has-laterality" is .
	*/
    public CV name;
    
	/**
	* The concept that modifies the primary code of a code
	*                                 phrase through the role relation.  For example, if
	*                                 SNOMED RT defines a concept "leg", a role relation
	*                                 "has-laterality", and another concept "left", the
	*                                 concept role relation allows adding the qualifier
	*                                 "has-laterality: left" to a primary code "leg" to
	*                                 construct the meaning "left leg".  In this example
	*                                 "left" is .
	*/
    public CD value;
    
	/**
	* Indicates if the sense of the role name is inverted.
	*                             This can be used in cases where the underlying code
	*                             system defines inversion but does not provide reciprocal
	*                             pairs of role names. By default, inverted is false.
	*/
    public String inverted;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("inverted"))
        {	
            java.lang.Object j = inObj.getAttribute("inverted");
            if (j != null)
            {
                inverted = j.toString();
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("name"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.name = (CV)__envelope.get(j,CV.class,false);
            }
            return true;
        }
        if (info.name.equals("value"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.value = (CD)__envelope.get(j,CD.class,false);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.name!=null?this.name:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.value!=null?this.value:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+2;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = CV.class;
            info.name = "name";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+1)
        {
            info.type = CD.class;
            info.name = "value";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 1;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
                {
                info.name = "inverted";
                info.namespace= "";
                if(this.inverted!=null)
                {
                    info.setValue(this.inverted);
                }
            
                }    if(index < count)
    {
        super.getAttributeInfo(index, info);
    }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
