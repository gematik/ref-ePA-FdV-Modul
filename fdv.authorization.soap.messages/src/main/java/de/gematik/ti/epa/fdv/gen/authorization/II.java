package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* An identifier that uniquely identifies a thing or object.
*                 Examples are object identifier for HL7 RIM objects,
*                 medical record number, order id, service catalog item id,
*                 Vehicle Identification Number (VIN), etc. Instance
*                 identifiers are defined based on ISO object identifiers.
*/
public class II extends ANY implements KvmSerializable,java.io.Serializable
{
    
	/**
	* A unique identifier that guarantees the global uniqueness
	*                             of the instance identifier. The root alone may be the
	*                             entire instance identifier.
	*/
    public String root;
    
	/**
	* A character string as a unique identifier within the
	*                             scope of the identifier root.
	*/
    public String extension;
    
	/**
	* A human readable name or mnemonic for the assigning
	*                             authority. This name may be provided solely for the
	*                             convenience of unaided humans interpreting an  value
	*                             and can have no computational meaning. Note: no
	*                             automated processing must depend on the assigning
	*                             authority name to be present in any form.
	*/
    public String assigningAuthorityName;
    
	/**
	* Specifies if the identifier is intended for human
	*                             display and data entry (displayable = true) as
	*                             opposed to pure machine interoperation (displayable
	*                             = false).
	*/
    public Boolean displayable;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("root"))
        {	
            java.lang.Object j = inObj.getAttribute("root");
            if (j != null)
            {
                root = j.toString();
            }
        }if (inObj.hasAttribute("extension"))
        {	
            java.lang.Object j = inObj.getAttribute("extension");
            if (j != null)
            {
                extension = j.toString();
            }
        }if (inObj.hasAttribute("assigningAuthorityName"))
        {	
            java.lang.Object j = inObj.getAttribute("assigningAuthorityName");
            if (j != null)
            {
                assigningAuthorityName = j.toString();
            }
        }if (inObj.hasAttribute("displayable"))
        {	
            java.lang.Object j = inObj.getAttribute("displayable");
            if (j != null)
            {
                displayable = new Boolean(j.toString());
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+0;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 4;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
                {
                info.name = "root";
                info.namespace= "";
                if(this.root!=null)
                {
                    info.setValue(this.root);
                }
            
                }if(index==count+1)
                {
                info.name = "extension";
                info.namespace= "";
                if(this.extension!=null)
                {
                    info.setValue(this.extension);
                }
            
                }if(index==count+2)
                {
                info.name = "assigningAuthorityName";
                info.namespace= "";
                if(this.assigningAuthorityName!=null)
                {
                    info.setValue(this.assigningAuthorityName);
                }
            
                }if(index==count+3)
                {
                info.name = "displayable";
                info.namespace= "";
                if(this.displayable!=null)
                {
                    info.setValue(this.displayable);
                }
            
                }    if(index < count)
    {
        super.getAttributeInfo(index, info);
    }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
