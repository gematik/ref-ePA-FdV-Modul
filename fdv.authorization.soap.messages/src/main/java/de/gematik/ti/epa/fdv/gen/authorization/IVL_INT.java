package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class IVL_INT extends SXCM_INT implements KvmSerializable,java.io.Serializable
{
    
	/**
	* The low limit of the interval.
	*/
    public IVXB_INT low;
    
	/**
	* The difference between high and low boundary. The
	*                            purpose of distinguishing a width property is to
	*                            handle all cases of incomplete information
	*                            symmetrically. In any interval representation only
	*                            two of the three properties high, low, and width need
	*                            to be stated and the third can be derived.
	*/
    public INT width;
    
	/**
	* The high limit of the interval.
	*/
    public IVXB_INT high;
    
    public IVXB_INT high_1;
    
	/**
	* The difference between high and low boundary. The
	*                            purpose of distinguishing a width property is to
	*                            handle all cases of incomplete information
	*                            symmetrically. In any interval representation only
	*                            two of the three properties high, low, and width need
	*                            to be stated and the third can be derived.
	*/
    public INT width_1;
    
	/**
	* The high limit of the interval.
	*/
    public IVXB_INT high_2;
    
	/**
	* The arithmetic mean of the interval (low plus high
	*                            divided by 2). The purpose of distinguishing the center
	*                            as a semantic property is for conversions of intervals
	*                            from and to point values.
	*/
    public INT center;
    
	/**
	* The difference between high and low boundary. The
	*                            purpose of distinguishing a width property is to
	*                            handle all cases of incomplete information
	*                            symmetrically. In any interval representation only
	*                            two of the three properties high, low, and width need
	*                            to be stated and the third can be derived.
	*/
    public INT width_2;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);



    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("low"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.low = (IVXB_INT)__envelope.get(j,IVXB_INT.class,false);
            }
            return true;
        }
        if (info.name.equals("width"))
        {
            if(obj!=null)
            {
                java.util.ArrayList< PropertyInfo> list=Helper.getProperties(soapObject,"width");
                int i0 = list.indexOf(info);
                if(i0 == 0)
                {
                    java.lang.Object j=obj;
                    this.width = (INT)__envelope.get(j,INT.class,false);
                }
                if(i0 == 1)
                {
                    java.lang.Object j=obj;
                    this.width_1 = (INT)__envelope.get(j,INT.class,false);
                }
                if(i0 == 2)
                {
                    java.lang.Object j=obj;
                    this.width_2 = (INT)__envelope.get(j,INT.class,false);
                }
            }
        }
        if (info.name.equals("high"))
        {
            if(obj!=null)
            {
                java.util.ArrayList< PropertyInfo> list=Helper.getProperties(soapObject,"high");
                int i0 = list.indexOf(info);
                if(i0 == 0)
                {
                    java.lang.Object j=obj;
                    this.high = (IVXB_INT)__envelope.get(j,IVXB_INT.class,false);
                }
                if(i0 == 1)
                {
                    java.lang.Object j=obj;
                    this.high_1 = (IVXB_INT)__envelope.get(j,IVXB_INT.class,false);
                }
                if(i0 == 2)
                {
                    java.lang.Object j=obj;
                    this.high_2 = (IVXB_INT)__envelope.get(j,IVXB_INT.class,false);
                }
            }
        }
        if (info.name.equals("center"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.center = (INT)__envelope.get(j,INT.class,false);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return low;
        }
        if(propertyIndex==count+1)
        {
            return this.width!=null?this.width:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.high!=null?this.high:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return this.high_1!=null?this.high_1:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return width_1;
        }
        if(propertyIndex==count+5)
        {
            return this.high_2!=null?this.high_2:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return center;
        }
        if(propertyIndex==count+7)
        {
            return this.width_2!=null?this.width_2:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+8;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = IVXB_INT.class;
            info.name = "low";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+1)
        {
            info.type = INT.class;
            info.name = "width";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+2)
        {
            info.type = IVXB_INT.class;
            info.name = "high";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+3)
        {
            info.type = IVXB_INT.class;
            info.name = "high";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+4)
        {
            info.type = INT.class;
            info.name = "width";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+5)
        {
            info.type = IVXB_INT.class;
            info.name = "high";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+6)
        {
            info.type = INT.class;
            info.name = "center";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+7)
        {
            info.type = INT.class;
            info.name = "width";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}
