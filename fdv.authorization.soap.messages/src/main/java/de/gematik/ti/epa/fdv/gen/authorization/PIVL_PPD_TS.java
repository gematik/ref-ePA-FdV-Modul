package de.gematik.ti.epa.fdv.gen.authorization;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------



import java.util.Hashtable;
import org.ksoap2.serialization.*;

/**
* Note: because this type is defined as an extension of SXCM_T,
*             all of the attributes and elements accepted for T are also
*             accepted by this definition.  However, they are NOT allowed
*             by the normative description of this type.  Unfortunately,
*             we cannot write a general purpose schematron contraints to
*             provide that extra validation, thus applications must be
*             aware that instance (fragments) that pass validation with
*             this might might still not be legal.
*/
public class PIVL_PPD_TS extends SXCM_PPD_TS implements KvmSerializable,java.io.Serializable
{
    
	/**
	* A prototype of the repeating interval specifying the
	*                         duration of each occurrence and anchors the periodic
	*                         interval sequence at a certain point in time.
	*/
    public IVL_PPD_TS phase;
    
	/**
	* A time duration specifying a reciprocal measure of
	*                         the frequency at which the periodic interval repeats.
	*/
    public PPD_PQ period;
    
	/**
	* Specifies if and how the repetitions are aligned to
	*                      the cycles of the underlying calendar (e.g., to
	*                      distinguish every 30 days from "the 5th of every
	*                      month".) A non-aligned periodic interval recurs
	*                      independently from the calendar. An aligned periodic
	*                      interval is synchronized with the calendar.
	*/
    public String alignment;
    
	/**
	* Indicates whether the exact timing is up to the party
	*                      executing the schedule (e.g., to distinguish "every 8
	*                      hours" from "3 times a day".)
	*/
    public Boolean institutionSpecified;
        

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

if (inObj.hasAttribute("alignment"))
        {	
            java.lang.Object j = inObj.getAttribute("alignment");
            if (j != null)
            {
                alignment = j.toString();
            }
        }if (inObj.hasAttribute("institutionSpecified"))
        {	
            java.lang.Object j = inObj.getAttribute("institutionSpecified");
            if (j != null)
            {
                institutionSpecified = new Boolean(j.toString());
            }
        }

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("phase"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.phase = (IVL_PPD_TS)__envelope.get(j,IVL_PPD_TS.class,false);
            }
            return true;
        }
        if (info.name.equals("period"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.period = (PPD_PQ)__envelope.get(j,PPD_PQ.class,false);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.phase!=null?this.phase:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.period!=null?this.period:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+2;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = IVL_PPD_TS.class;
            info.name = "phase";
            info.namespace= "urn:hl7-org:v3";
        }
        if(propertyIndex==count+1)
        {
            info.type = PPD_PQ.class;
            info.name = "period";
            info.namespace= "urn:hl7-org:v3";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }


    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 2;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
                {
                info.name = "alignment";
                info.namespace= "";
                if(this.alignment!=null)
                {
                    info.setValue(this.alignment);
                }
            
                }if(index==count+1)
                {
                info.name = "institutionSpecified";
                info.namespace= "";
                if(this.institutionSpecified!=null)
                {
                    info.setValue(this.institutionSpecified);
                }
            
                }    if(index < count)
    {
        super.getAttributeInfo(index, info);
    }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
