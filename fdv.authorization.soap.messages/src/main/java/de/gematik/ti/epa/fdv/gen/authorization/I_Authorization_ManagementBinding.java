package de.gematik.ti.epa.fdv.gen.authorization;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.6.2.0
//
// Created by Quasar Development 
//
//---------------------------------------------------





import org.ksoap2.HeaderProperty;
import org.ksoap2.serialization.*;
import org.kxml2.kdom.Element;

import java.util.ArrayList;
import java.util.List;


public class I_Authorization_ManagementBinding
{
    interface IWcfMethod
    {
        ExtendedSoapSerializationEnvelope CreateSoapEnvelope() throws java.lang.Exception;

        java.lang.Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,java.lang.Object result) throws java.lang.Exception;
    }

    String url="http://unspecified";

    int timeOut=60000;
    public List< HeaderProperty> httpHeaders= new ArrayList< HeaderProperty>();
    public boolean enableLogging;
    public boolean createClassesForAny = false;

    public I_Authorization_ManagementBinding(){}

    public I_Authorization_ManagementBinding(String url)
    {
        this.url = url;
    }

    public I_Authorization_ManagementBinding(String url,int timeOut)
    {
        this.url = url;
        this.timeOut=timeOut;
    }

    protected org.ksoap2.transport.Transport createTransport()
    {
        try
        {
            java.net.URI uri = new java.net.URI(url);
            if(uri.getScheme().equalsIgnoreCase("https"))
            {
                int port=uri.getPort()>0?uri.getPort():443;
                return new com.easywsdl.exksoap2.transport.AdvancedHttpsTransportSE(uri.getHost(), port, uri.getPath(), timeOut);
            }
            else
            {
                return new com.easywsdl.exksoap2.transport.AdvancedHttpTransportSE(url,timeOut);
            }

        }
        catch (java.net.URISyntaxException e)
        {
        }
        return null;
    }

    protected ExtendedSoapSerializationEnvelope createEnvelope()
    {
        ExtendedSoapSerializationEnvelope envelope= new ExtendedSoapSerializationEnvelope(ExtendedSoapSerializationEnvelope.VER12);
        envelope.createClassesForAny = createClassesForAny;
        return envelope;
    }

    protected java.util.List sendRequest(String methodName,ExtendedSoapSerializationEnvelope envelope,org.ksoap2.transport.Transport transport ,com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile profile )throws java.lang.Exception
    {
        if(transport instanceof com.easywsdl.exksoap2.transport.AdvancedHttpTransportSE )
        {
            return ((com.easywsdl.exksoap2.transport.AdvancedHttpTransportSE)transport).call(methodName, envelope,httpHeaders,null,profile);
        }
        else
        {
            return ((com.easywsdl.exksoap2.transport.AdvancedHttpsTransportSE)transport).call(methodName, envelope,httpHeaders,null,profile);
        }
    }

    java.lang.Object getResult(java.lang.Class destObj,java.lang.Object source,String resultName,ExtendedSoapSerializationEnvelope __envelope) throws java.lang.Exception
    {
        if(source==null)
        {
            return null;
        }
        if(source instanceof SoapPrimitive)
        {
            SoapPrimitive soap =(SoapPrimitive)source;
            if(soap.getName().equals(resultName))
            {
                java.lang.Object instance=__envelope.get(source,destObj,false);
                return instance;
            }
        }
        else
        {
            SoapObject soap = (SoapObject)source;
            if (soap.hasProperty(resultName))
            {
                java.lang.Object j=soap.getProperty(resultName);
                if(j==null)
                {
                    return null;
                }
                java.lang.Object instance=__envelope.get(j,destObj,false);
                return instance;
            }
            else if( soap.getName().equals(resultName)) 
            {
                java.lang.Object instance=__envelope.get(source,destObj,false);
                return instance;
            }
        }

        return null;
    }

    
    public java.lang.Object PutAuthorizationKey(final AuthorizationKeyType AuthorizationKey,final RecordIdentifierType RecordIdentifier,final DeviceIdType DeviceID,final String NotificationInfoRepresentative ) throws java.lang.Exception
    {
        com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile __profile = new com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile();
        return (java.lang.Object)execute(new IWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
                ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1","AuthorizationKey",new AuthorizationKeyType().getClass());
                __envelope.addMapping("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1","RecordIdentifier",new RecordIdentifierType().getClass());
                __envelope.addMapping("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1","DeviceID",new DeviceIdType().getClass());
                SoapObject __soapReq = new SoapObject("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", "PutAuthorizationKey");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="AuthorizationKey";
                __info.type=AuthorizationKeyType.class;
                __info.setValue(AuthorizationKey);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="RecordIdentifier";
                __info.type=RecordIdentifierType.class;
                __info.setValue(RecordIdentifier);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="DeviceID";
                __info.type=DeviceIdType.class;
                __info.setValue(DeviceID!=null?DeviceID:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="NotificationInfoRepresentative";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(NotificationInfoRepresentative!=null?NotificationInfoRepresentative:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public java.lang.Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,java.lang.Object __result)throws java.lang.Exception {
                java.lang.Object j = __result;
                return __envelope.getSpecificType(j);
            }
        },"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.0#PutAuthorizationKey",__profile);
    }
    
    public RecordStateType CheckRecordExists(final InsurantIdType KVNR ) throws java.lang.Exception
    {
        com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile __profile = new com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile();
        return (RecordStateType)execute(new IWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
                ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1","KVNR",new InsurantIdType().getClass());
                SoapObject __soapReq = new SoapObject("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", "CheckRecordExists");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="KVNR";
                __info.type=InsurantIdType.class;
                __info.setValue(KVNR);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public java.lang.Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,java.lang.Object __result)throws java.lang.Exception {
                return (RecordStateType)getResult(RecordStateType.class,__result,"RecordState",__envelope);
            }
        },"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.0#CheckRecordExists",__profile);
    }
    
    public GetAuthorizationListResponse GetAuthorizationList(final RecordIdentifierType RecordIdentifier,final DeviceIdType DeviceID ) throws java.lang.Exception
    {
        com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile __profile = new com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile();
        return (GetAuthorizationListResponse)execute(new IWcfMethod()
        {
            @Override
            public ExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
                ExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                __envelope.addMapping("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1","RecordIdentifier",new RecordIdentifierType().getClass());
                __envelope.addMapping("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1","DeviceID",new DeviceIdType().getClass());
                SoapObject __soapReq = new SoapObject("http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", "GetAuthorizationList");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="RecordIdentifier";
                __info.type=RecordIdentifierType.class;
                __info.setValue(RecordIdentifier!=null?RecordIdentifier:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1";
                __info.name="DeviceID";
                __info.type=DeviceIdType.class;
                __info.setValue(DeviceID!=null?DeviceID:SoapPrimitive.NullSkip);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public java.lang.Object ProcessResult(ExtendedSoapSerializationEnvelope __envelope,java.lang.Object __result)throws java.lang.Exception {
                return (GetAuthorizationListResponse)getResult(GetAuthorizationListResponse.class,__result,"GetAuthorizationListResponse",__envelope);
            }
        },"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.0#GetAuthorizationList",__profile);
    }

    protected java.lang.Object execute(IWcfMethod wcfMethod,String methodName,com.easywsdl.exksoap2.ws_specifications.profile.WS_Profile profile) throws java.lang.Exception
    {
        org.ksoap2.transport.Transport __httpTransport=createTransport();
        __httpTransport.debug=enableLogging;
        ExtendedSoapSerializationEnvelope __envelope=wcfMethod.CreateSoapEnvelope();
        try
        {
            sendRequest(methodName, __envelope, __httpTransport,profile);
        }
        finally {
            if (__httpTransport.debug) {
                if (__httpTransport.requestDump != null) {
                    System.out.println("requestDump: "+__httpTransport.requestDump);

                }
                if (__httpTransport.responseDump != null) {
                    System.out.println("responseDump: "+__httpTransport.responseDump);
                }
            }
        }
        java.lang.Object __retObj = __envelope.bodyIn;
        if (__retObj instanceof org.ksoap2.SoapFault){
            org.ksoap2.SoapFault __fault = (org.ksoap2.SoapFault)__retObj;
            throw convertToException(__fault,__envelope);
        }else{
            return wcfMethod.ProcessResult(__envelope,__retObj);
        }
    }


    protected java.lang.Exception convertToException(org.ksoap2.SoapFault fault,ExtendedSoapSerializationEnvelope envelope)
    {
        org.ksoap2.SoapFault newException = fault;
                
        if(fault.detail!=null && fault.detail.getChildCount()>0)
        {
            Element detailsNode=(Element)fault.detail.getChild(0);
            try
            {
                SoapObject exceptionObject = null;
                exceptionObject=envelope.GetExceptionDetail(detailsNode,"http://ws.gematik.de/tel/error/v2.0","Error");
                if (exceptionObject != null)
                {
                    Error ex=new Error();
                    ex.loadFromSoap(exceptionObject,envelope);
                    newException = ex;
                }
            }
            catch (java.lang.Exception e)
            {
                e.printStackTrace();
            }
            newException.detail=fault.detail;
            newException.faultactor=fault.faultactor;
            newException.faultcode=fault.faultcode;
            newException.faultstring=fault.faultstring;
            newException.version=fault.version;
        }
        return newException;
    }
}


