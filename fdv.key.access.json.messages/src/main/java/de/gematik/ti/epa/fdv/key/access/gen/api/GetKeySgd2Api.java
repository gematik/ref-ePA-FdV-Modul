/*
 * ePA KeyAccess
 * REST Schnittstelle der SGD Server f√ºr den Keyaccess
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.fdv.key.access.gen.api;

import de.gematik.ti.epa.fdv.key.access.gen.invoker.ApiCallback;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.ApiClient;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.ApiException;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.ApiResponse;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.Configuration;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.Pair;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.ProgressRequestBody;
import de.gematik.ti.epa.fdv.key.access.gen.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.gematik.ti.epa.fdv.key.access.gen.model.RequestBody;
import de.gematik.ti.epa.fdv.key.access.gen.model.SgdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetKeySgd2Api {
    private ApiClient localVarApiClient;

    public GetKeySgd2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public GetKeySgd2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listEciesKeySgd2
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEciesKeySgd2Call(RequestBody requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/sgd2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEciesKeySgd2ValidateBeforeCall(RequestBody requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listEciesKeySgd2Call(requestBody, _callback);
        return localVarCall;

    }

    /**
     * List all response from aktorServer/SGD2 inclusive PublicEciesKey
     * 
     * @param requestBody  (optional)
     * @return SgdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public SgdResponse listEciesKeySgd2(RequestBody requestBody) throws ApiException {
        ApiResponse<SgdResponse> localVarResp = listEciesKeySgd2WithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * List all response from aktorServer/SGD2 inclusive PublicEciesKey
     * 
     * @param requestBody  (optional)
     * @return ApiResponse&lt;SgdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SgdResponse> listEciesKeySgd2WithHttpInfo(RequestBody requestBody) throws ApiException {
        okhttp3.Call localVarCall = listEciesKeySgd2ValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<SgdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all response from aktorServer/SGD2 inclusive PublicEciesKey (asynchronously)
     * 
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEciesKeySgd2Async(RequestBody requestBody, final ApiCallback<SgdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEciesKeySgd2ValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<SgdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
