/*
 * Copyright (c) 2020 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    dependencies {
        classpath "de.gematik:gematik-parent-plugin:1.2.1"
        classpath "de.gematik:documentation-plugin:1.1.2"
        classpath "org.openapitools:openapi-generator-gradle-plugin:4.1.1"
    }
}

apply plugin: "de.gematik.parent"
apply plugin: "de.gematik.publish"
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.javadoc"

group = 'de.gematik.ti.epa'

description = """ePA FdV Modul"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javadoc {
    source = sourceSets.main.allJava
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'org.greenrobot', name: 'eventbus', version: '3.1.1'
    testImplementation group: 'com.github.tony19', name: 'logback-android', version: '1.3.0-3'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'


    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

}

gematikDocumentation {
    projectShortcut = "FDVMODUL"
    plantUmlDestinationFolder = "docs/plantuml/FDVMODUL"
    asciidocRootSourceDir = "docs"
}

gematikPublish {
    name = "FdV-Modul"
    description = "The FdV module bundles libraries that provide the functions (service localization, authentication, authorization, session handling, key access) necessary for the use of the electronic patient record."
    gitHubProjectName = "ref-epa-fdv-modul"
}
test {
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

task generateAcrossJavadoc(type: GradleBuild) {
    buildFile = 'javadoc.gradle'
    tasks = ['allJavadoc']
}

task cleanAcrossJavadoc(type: GradleBuild) {
    buildFile = 'javadoc.gradle'
    tasks = ['clean']
}

if (!project.buildscript.configurations.getByName("classpath").filter { a -> a.toString().contains("org.sonarsource.scanner.gradle") }.isEmpty()) {
    sonarqube {
        properties {
            property 'sonar.exclusions', "**/gen/**/*,**/generatedfromwsdl/**/*"
            property 'sonar.coverage.exclusions', "**/gen/**/*,**/generatedfromwsdl/**/*"
            property 'sonar.cpd.exclusions', "**/gen/**/*,**/generatedfromwsdl/**/*"
            property 'sonar.test.exclusions', "**/gen/**/*,**/generatedfromwsdl/**/*"
        }
    }
}

javadoc.finalizedBy generateAcrossJavadoc
clean.finalizedBy cleanAcrossJavadoc
